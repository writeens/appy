{"version":3,"sources":["Joke.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Joke","vote","this","props","color","emoji","style","getStyle","react_default","a","createElement","className","text","onClick","remove","upvote","id","borderColor","downvote","Component","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","jokes","JSON","parse","window","localStorage","getItem","loading","jokeSeen","Set","map","joke","updateVote","bind","assertThisInitialized","getJokes","handleClick","length","numJokesToGet","setState","axios","get","headers","Accept","newJoke","data","has","push","uuid","votes","st","concat","toConsumableArray","setItem","stringify","_this2","alert","_context","t0","change","_this3","newJokes","objectSpread","_this4","filter","_this5","sort","b","src","alt","src_Joke_0","key","removeJoke","defaultProps","App","src_Board_0","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a61ab1ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./Joke.css\";\r\n\r\nclass Joke extends Component{\r\n    getStyle(){\r\n        const {vote} = this.props;\r\n        if(vote >= 15){\r\n            return  {color: \"#4CAF50\", emoji: \"em em-rolling_on_the_floor_laughing\"};\r\n        } else if(vote >= 12){\r\n            return {color: \"#8BC34A\", emoji: \"em em-laughing\"};\r\n        } else if(vote >= 9){\r\n            return {color: \"#CDDC39\", emoji: \"em em-smiley\"};\r\n        } else if(vote >= 6){\r\n            return {color: \"#FFEB3B\", emoji: \"em em-slightly_smiling_face\"};\r\n        } else if(vote >= 3){\r\n            return {color: \"#FFC107\", emoji: \"em em-neutral_face\"};\r\n        } else if(vote >= 0){\r\n            return {color: \"#FF9800\", emoji: \"em em-confused\"};\r\n        } else{\r\n            return {color: \"#F44336\", emoji: \"em em-angry\"};\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let style = this.getStyle();\r\n        return(\r\n            <div className=\"Joke\">\r\n                <div className=\"Joke-top\">\r\n                    <div className=\"Joke-emoji\">\r\n                        <i className={style.emoji}></i>\r\n                    </div>\r\n                    <div className=\"Joke-joke\">{this.props.text}</div>\r\n                    <i onClick={this.props.remove} className=\"Joke-clear far fa-window-close\"></i>\r\n                </div>\r\n                <div className=\"Joke-vote\">\r\n                    <i className=\"far fa-thumbs-up\" onClick={this.props.upvote}></i>\r\n                    <span id=\"Joke-vote-circle\" style={{borderColor: style.color}}>{this.props.vote}</span>\r\n                    <i className=\"far fa-thumbs-down\" onClick={this.props.downvote}></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Joke;","import React, { Component } from 'react'\r\nimport uuid from \"uuid/v4\";\r\nimport \"./Board.css\";\r\nimport Joke from \"./Joke\";\r\nimport axios from 'axios';\r\nconst JOKE_API = \"https://icanhazdadjoke.com/\";\r\n\r\nclass Board extends Component{\r\n    static defaultProps = {\r\n        numJokesToGet: 10\r\n    };\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\" ),\r\n                        loading: false};\r\n        this.jokeSeen = new Set(this.state.jokes.map(joke => joke.text))\r\n        this.updateVote = this.updateVote.bind(this);\r\n        this.getJokes = this.getJokes.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        if(this.state.jokes.length === 0){\r\n            this.getJokes();\r\n        }\r\n    }\r\n    async getJokes(){\r\n        // Load Jokes\r\n        try {\r\n            let jokes = [];\r\n            while(jokes.length < this.props.numJokesToGet){\r\n                this.setState({loading: true})\r\n                let joke = await axios.get(JOKE_API, {\r\n                    headers: { Accept: \"application/json\" }\r\n                });\r\n                let newJoke = joke.data.joke\r\n                if(!this.jokeSeen.has(newJoke)){\r\n                    jokes.push({id:uuid(), text:newJoke, votes:0})\r\n                }\r\n            }\r\n            // set the state to the jokes retrieved after request and append new jokes to the end\r\n            this.setState(st => ({\r\n                loading: false,\r\n                jokes: [...st.jokes, ...jokes]\r\n            }), () => {\r\n                window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n            })\r\n        } catch(err){\r\n            alert(err);\r\n            this.setState({loading: false})\r\n        }\r\n    }\r\n    // Update votes  \r\n    updateVote(id, change){\r\n        let newJokes = this.state.jokes.map(joke => {\r\n            if(joke.id === id){\r\n                return {...joke, votes: joke.votes + change}\r\n            }else{\r\n                return joke;\r\n            }\r\n        })\r\n        // Passing a callback to setState\r\n        this.setState({jokes: newJokes}, () => {\r\n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n        })\r\n    }\r\n    handleClick(){\r\n        this.setState({ loading: true}, this.getJokes)\r\n    }\r\n    // Remove Jokes based on Id\r\n    removeJoke(id){\r\n        let newJokes = this.state.jokes.filter(joke => joke.id !== id)\r\n        this.setState({jokes: newJokes}, () => {\r\n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.loading){\r\n            return(\r\n                <div className=\"Board-spinner\">\r\n                    <i className=\"far fa-8x fa-spin fa-laugh\"></i>\r\n                    <h1 className=\"Board-title\">Loading...</h1>\r\n                </div>\r\n            )\r\n        }\r\n        let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes)\r\n        return(\r\n            <div className=\"Board\">\r\n                <div className=\"Board-sidebar\">\r\n                    <h1 className=\"Board-title\">\r\n                        <span>Jokes</span></h1>\r\n                    <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" alt=\"laughing Emoji\"/>\r\n                    <button onClick={this.handleClick} className=\"Board-button\">New Jokes</button>\r\n                </div>\r\n                <div className=\"Board-sm\">\r\n                    <span className=\"Board-sm-title\">Appy</span>\r\n                    <button onClick={this.handleClick} className=\"Board-sm-button\">New Jokes</button>\r\n                </div>\r\n                <div className=\"Board-jokes\">\r\n                    {jokes.map(joke => <Joke \r\n                                key={joke.id} \r\n                                text={joke.text} \r\n                                id={joke.id} \r\n                                upvote={() => this.updateVote(joke.id, 1)} \r\n                                downvote={() => this.updateVote(joke.id, -1)} \r\n                                vote={joke.votes} remove={() => this.removeJoke(joke.id)} />)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}